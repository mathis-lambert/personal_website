name: CI

on:
  push:
    branches: ["**"]
    # Build/test on all pushes; publish only on tags
    tags: ["v*", "v*.*", "v*.*.*"]
  pull_request:
  release:
    types: [published]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend:
    name: Frontend — Lint, Format, Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install deps
        run: npm ci

      - name: Prettier check
        run: npx prettier --check .

      - name: ESLint
        run: npm run lint -- --max-warnings=0

      - name: Typecheck + Build
        run: npm run build

  backend:
    name: Backend — Lint, Format, Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: pyproject.toml

      - name: Install deps (with dev extras)
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: '1'
        run: |
          python -m pip install --upgrade pip
          pip install '.[dev]'

      - name: Ruff lint
        run: ruff check .

      - name: Ruff format check
        run: ruff format --check .

      # TODO: write tests


  docker:
    name: Build and Publish Images
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU (amd64 + arm64)
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: ${{ github.event_name == 'release' || startsWith(github.ref, 'refs/tags/') }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta (frontend)
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/personal-website-frontend
          tags: |
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.event_name == 'release' || startsWith(github.ref, 'refs/tags/') }}
            type=sha,format=short,enable=${{ github.event_name != 'pull_request' }}

      - name: Build and push (frontend)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'release' || startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

      - name: Docker meta (backend)
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/personal-website-backend
          tags: |
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.event_name == 'release' || startsWith(github.ref, 'refs/tags/') }}
            type=sha,format=short,enable=${{ github.event_name != 'pull_request' }}

      - name: Build and push (backend)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'release' || startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
